// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsClient interface {
	// 添加商品信息
	CreateGoods(ctx context.Context, in *CreateGoodsReq, opts ...grpc.CallOption) (*CreateGoodsRes, error)
	// 添加商品规格属性值
	CreateSpecification(ctx context.Context, in *CreateSpecificationReq, opts ...grpc.CallOption) (*CreateSpecificationRes, error)
	CreateSku(ctx context.Context, in *CreateSkuReq, opts ...grpc.CallOption) (*CreateSkuRes, error)
}

type goodsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsClient(cc grpc.ClientConnInterface) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) CreateGoods(ctx context.Context, in *CreateGoodsReq, opts ...grpc.CallOption) (*CreateGoodsRes, error) {
	out := new(CreateGoodsRes)
	err := c.cc.Invoke(ctx, "/goods.Goods/CreateGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateSpecification(ctx context.Context, in *CreateSpecificationReq, opts ...grpc.CallOption) (*CreateSpecificationRes, error) {
	out := new(CreateSpecificationRes)
	err := c.cc.Invoke(ctx, "/goods.Goods/CreateSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) CreateSku(ctx context.Context, in *CreateSkuReq, opts ...grpc.CallOption) (*CreateSkuRes, error) {
	out := new(CreateSkuRes)
	err := c.cc.Invoke(ctx, "/goods.Goods/CreateSku", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
// All implementations must embed UnimplementedGoodsServer
// for forward compatibility
type GoodsServer interface {
	// 添加商品信息
	CreateGoods(context.Context, *CreateGoodsReq) (*CreateGoodsRes, error)
	// 添加商品规格属性值
	CreateSpecification(context.Context, *CreateSpecificationReq) (*CreateSpecificationRes, error)
	CreateSku(context.Context, *CreateSkuReq) (*CreateSkuRes, error)
	mustEmbedUnimplementedGoodsServer()
}

// UnimplementedGoodsServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (UnimplementedGoodsServer) CreateGoods(context.Context, *CreateGoodsReq) (*CreateGoodsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoods not implemented")
}
func (UnimplementedGoodsServer) CreateSpecification(context.Context, *CreateSpecificationReq) (*CreateSpecificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecification not implemented")
}
func (UnimplementedGoodsServer) CreateSku(context.Context, *CreateSkuReq) (*CreateSkuRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSku not implemented")
}
func (UnimplementedGoodsServer) mustEmbedUnimplementedGoodsServer() {}

// UnsafeGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServer will
// result in compilation errors.
type UnsafeGoodsServer interface {
	mustEmbedUnimplementedGoodsServer()
}

func RegisterGoodsServer(s grpc.ServiceRegistrar, srv GoodsServer) {
	s.RegisterService(&Goods_ServiceDesc, srv)
}

func _Goods_CreateGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.Goods/CreateGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateGoods(ctx, req.(*CreateGoodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.Goods/CreateSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateSpecification(ctx, req.(*CreateSpecificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_CreateSku_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSkuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).CreateSku(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods.Goods/CreateSku",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).CreateSku(ctx, req.(*CreateSkuReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Goods_ServiceDesc is the grpc.ServiceDesc for Goods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.Goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGoods",
			Handler:    _Goods_CreateGoods_Handler,
		},
		{
			MethodName: "CreateSpecification",
			Handler:    _Goods_CreateSpecification_Handler,
		},
		{
			MethodName: "CreateSku",
			Handler:    _Goods_CreateSku_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
